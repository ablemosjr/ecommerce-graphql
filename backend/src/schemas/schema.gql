# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Cart {
  id: Float!
  items: [CartItem!]!
  user: User!
}

type CartItem {
  cart: Cart!
  id: Float!
  product: Product!
  quantity: Float!
}

type Category {
  id: Float!
  name: String!
  products: [Product!]!
}

input CreateCardItemInput {
  productId: Float!
  quantity: Float!
}

input CreateCategoryInput {
  name: String!
}

input CreateOrderInput {
  items: [OrderItemDto!]!
  userId: Float!
}

input CreateProductInput {
  categoryId: Float!
  description: String!
  name: String!
  price: Float!
  quantity: Float!
  sku: String!
}

input CreateReviewInput {
  comment: String!
  rating: Float!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  role: UserRole
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  addCartItem(createCartItemInput: CreateCardItemInput!): Cart!
  addReview(createReviewInput: CreateReviewInput!, productId: Float!): Review!
  addToWishlist(productId: Float!): Wishlist!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  createPaymentIntent(orderId: Float!): PaymentResponse!
  createProduct(createProductInput: CreateProductInput!): Product!
  createUser(createUserInput: CreateUserInput!): User!
  deleteReview(reviewId: Float!): Boolean!
  removeCartItem(itemId: Float!): Cart!
  removeFromWishlist(productId: Float!): Boolean!
  removeProduct(id: Float!): Boolean!
  removeUser(id: Float!): Boolean!
  updateCartItem(cartItemId: Float!, updateCartItemInput: UpdateCardItemInput!): Cart!
  updateCategory(id: Float!, updateCategoryInput: UpdateCategoryInput!): Category!
  updateOrderStatus(id: Float!, updateOrderInput: UpdateOrderInput!): Order!
  updateProduct(id: Float!, updateProductInput: UpdateProductInput!): Product!
  updateReview(reviewId: Float!, updateReviewInput: UpdateReviewInput!): Review!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Order {
  createAt: DateTime!
  id: Float!
  items: [OrderItem!]!
  status: OrderStatus!
  total: Float!
  user: User!
}

type OrderItem {
  id: Float!
  order: Order!
  price: Float!
  product: Product!
  quantity: Float!
}

input OrderItemDto {
  productId: Float!
  quantity: Float!
}

enum OrderStatus {
  CANCELED
  DELIVERED
  PAID
  PENDING
  PLACED
  PROCESSING
  SHIPPED
}

type PaymentResponse {
  response: JSON!
}

type Product {
  cartItems: [CartItem!]!
  category: Category!
  description: String!
  id: Float!
  name: String!
  price: Float!
  quantity: Float!
  reviews: [Review!]!
  sku: String!
  wishlists: [Wishlist!]!
}

type Query {
  checkout: Cart!
  filterProducts(categoryId: Float, maxPrice: Float, minPrice: Float, minRating: Float): [Product!]!
  findCategoryById(id: Float!): Category!
  findOne(email: String!): User!
  findOrderById(id: Float!): Order!
  findProductById(id: Float!): Product!
  getAllCategories: [Category!]!
  getAllOrders: [Order!]!
  getAllProducts: [Product!]!
  getCartSummary: Cart!
  getInvoice(orderId: Float!): String!
  getProductReviews(productId: Float!): [Review!]!
  login(email: String!, password: String!): String!
  searchProducts(query: String!): [Product!]!
  viewWishlist: [Wishlist!]!
}

type Review {
  comment: String!
  id: Float!
  product: Product!
  rating: Float!
  user: User!
}

input UpdateCardItemInput {
  quantity: Float!
}

input UpdateCategoryInput {
  name: String
}

input UpdateOrderInput {
  status: OrderStatus!
}

input UpdateProductInput {
  categoryId: Float
  description: String
  name: String
  price: Float
  quantity: Float
  sku: String
}

input UpdateReviewInput {
  comment: String!
  rating: Float!
}

input UpdateUserInput {
  id: Float!
  name: String
  password: String
  profile: String
}

type User {
  carts: [Cart!]!
  email: String!
  id: Float!
  name: String!
  orders: [Order!]!
  password: String!
  profile: String
  reviews: [Review!]!
  role: UserRole
  wishlist: [Wishlist!]!
}

enum UserRole {
  ADMIN
  CUSTOMER
}

type Wishlist {
  id: Float!
  product: Product!
  user: User!
}