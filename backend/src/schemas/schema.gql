# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Float!
  name: String!
  products: [Product!]!
}

input CreateCategoryDto {
  name: String!
}

input CreateOrderDto {
  items: [OrderItemDto!]!
  userId: Float!
}

input CreateProductDto {
  categoryId: Float!
  description: String!
  name: String!
  price: Float!
  quantity: Float!
  sku: String!
}

input CreateUserInput {
  email: String!
  password: String!
  role: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createCategory(createCategoryInput: CreateCategoryDto!): Category!
  createOrder(createOrderDto: CreateOrderDto!): Order!
  createProduct(createProductInput: CreateProductDto!): Product!
  createUser(createUserInput: CreateUserInput!): User!
  removeProduct(id: Float!): Boolean!
  removeUser(id: Float!): Boolean!
  updateCategory(id: Float!, updateCategoryInput: UpdateCategoryDto!): Category!
  updateOrderStatus(id: Float!, updateOrderDto: UpdateOrderDto!): Order!
  updateProduct(id: Float!, updateProductInput: UpdateProductDto!): Product!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Order {
  createAt: DateTime!
  id: Float!
  items: [OrderItem!]!
  status: OrderStatus!
  total: Float!
  user: User!
}

type OrderItem {
  id: Float!
  order: Order!
  price: Float!
  product: Product!
  quantity: Float!
}

input OrderItemDto {
  productId: Float!
  quantity: Float!
}

enum OrderStatus {
  CANCELED
  DELIVERED
  PENDING
  PLACED
  PROCESSING
  SHIPPED
}

type Product {
  category: Category!
  description: String!
  id: Float!
  name: String!
  price: Float!
  quantity: Float!
  sku: String!
}

type Query {
  findCategoryById(id: Float!): Category!
  findOne(email: String!): User!
  findOrderById(id: Float!): Order!
  findProductById(id: Float!): Product!
  getAllCategories: [Category!]!
  getAllOrders: [Order!]!
  getAllProducts: [Product!]!
  login(email: String!, password: String!): String!
}

input UpdateCategoryDto {
  name: String
}

input UpdateOrderDto {
  status: OrderStatus!
}

input UpdateProductDto {
  categoryId: Float
  description: String
  name: String
  price: Float
  quantity: Float
  sku: String
}

input UpdateUserInput {
  id: Float!
  password: String
  profile: String
}

type User {
  email: String!
  id: Float!
  orders: [Order!]!
  password: String!
  profile: String
  role: String
}